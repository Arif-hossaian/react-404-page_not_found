{"version":3,"sources":["logo.svg","component/About.js","component/Contact.js","component/Error.js","component/Service.js","component/Navbar.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","Contact","Error","to","Service","Navbar","exact","activeClassName","Main","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,mICU5BC,MARf,WACI,OACI,yBAAKC,UAAU,cACX,4CCKGC,MARf,WACI,OACI,yBAAKD,UAAU,cACX,+CCQGE,MAVf,WACI,OACI,yBAAKF,UAAU,cACX,+CACA,6DACA,kBAAC,IAAD,CAASG,GAAG,KAAZ,aCEGC,MARf,WACI,OACI,6BACI,8CCQGC,MAVf,WACI,OACI,yBAAKL,UAAU,cACX,kBAAC,IAAD,CAASM,OAAK,EAACC,gBAAgB,eAAeJ,GAAG,KAAjD,YACA,kBAAC,IAAD,CAASG,OAAK,EAACC,gBAAgB,eAAeJ,GAAG,YAAjD,cACA,kBAAC,IAAD,CAASG,OAAK,EAACC,gBAAgB,eAAeJ,GAAG,YAAjD,cCoBGK,MApBf,WAKI,OACI,6BACA,kBAAC,EAAD,MACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOF,OAAK,EAACG,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACG,KAAK,WAAWC,UAAWT,IACxC,kBAAC,IAAD,CAAOK,OAAK,EAACG,KAAK,WAAWC,UAAWN,IACxC,kBAAC,IAAD,CAAQK,KAAK,gBAAgBC,UAV5B,WACT,OAAM,uDAUE,kBAAC,IAAD,CAAOA,UAAWR,OCJnBS,MAVf,WACE,OACE,6BACA,kBAAC,IAAD,KACA,kBAAC,EAAD,SCCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b334bc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div className=\"set_style2\">\r\n            <h1>about apge</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from 'react'\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div className=\"set_style2\">\r\n            <h1> contact page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nfunction Error() {\r\n    return (\r\n        <div className=\"set_style2\">\r\n            <h1> 404 Error page</h1>\r\n            <p>Sorry, this page is not exists</p>\r\n            <NavLink to=\"/\">Go Back</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import React from 'react'\r\n\r\nfunction Service() {\r\n    return (\r\n        <div>\r\n            <h1>service page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Service\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"menu_style\">\r\n            <NavLink exact activeClassName=\"active_class\" to=\"/\">About us</NavLink>\r\n            <NavLink exact activeClassName=\"active_class\" to=\"/contact\">Contact us</NavLink>\r\n            <NavLink exact activeClassName=\"active_class\" to=\"/service\">Services</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport{Switch, Route, Redirect} from \"react-router-dom\"\r\nimport About  from \"./About\"\r\nimport Contact from \"./Contact\"\r\nimport Error from \"./Error\"\r\nimport Service from './Service'\r\nimport Navbar from './Navbar'\r\n\r\nfunction Main() {\r\n\r\n    const Name = () =>{\r\n        return<h1>Hello i am name page</h1>\r\n    }\r\n    return (\r\n        <div>\r\n        <Navbar />\r\n            <Switch>\r\n                <Route exact path=\"/\" component={About}></Route>\r\n                <Route exact path=\"/contact\" component={Contact}></Route>\r\n                <Route exact path=\"/service\" component={Service}></Route>\r\n                <Route  path=\"/contact/name\" component={Name}></Route>\r\n                <Route component={Error}/>\r\n                {/* <Redirect path=\"/\"/> */}\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\"\nimport Main from \"./component/Main\"\n\n\nfunction App() {\n  return (\n    <div >\n    <BrowserRouter> \n    <Main />\n    </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}